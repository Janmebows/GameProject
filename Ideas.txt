
NOTES
Unfinished/unimportant business:
Camera needs smoothing out of lock-on
Fix targetting to consider angle and distance (angle has greater impact than distance)

CONTROL SCHEMA
-LS - move (duh)
-LSC - sprint
-RS
	- camera (not locked on)
	- change targetted limb (when locked on)
-RSC - toggle lock on
-A - jump (possibly swap with B)
-B - interact (possibly swap with A)
-X - ability toggle 1*(possibly swap these with LT/RT)
-Y - ability toggle 2* (possibly swap these with LT/RT)
-LB - change target left
-RB - change target right 
-LT - light attack (possibly swap these with x/y) 
-RT - heavy attack (possibly swap these with x/y)
-DPAD
	- side change weapon
	- updown quick item

*hold x + RT = heavy ability 1
 hold y + RT = heavy ability 2
 hold x + LT = light ability 1
 hold y + LT = light ability 2
possibly RT + LT = block? - might need to put this on its own key (possibly B?) 


Next objectives:
Get player to HOLD weapon (soon we'll have to work out inventories too o no)
hitboxes
attacking
appendages


weapons (attacking)
	- damage not measured as a number
		- instead have weight/size (reach)/surface area?/sharpness ooh we could have stickiness and bounciness
			-for blunt weapons instead of sharpness maybe something to do with spikes or something idk
			-sharpness vs surface 
	- somehow calculate a weapons speed and allow it to affect animation times
		-have a similar mechanic to light/medium/heavy rolls in dark souls (or have it truly based on the speed)
	- weapons can have bonuses to certain things (inflicts more pain / causes more bleeding)

weapons construction system
enum pieceType {hilt,guard,shaft,spike,head}
	-each part will have its own collider!
	- each component piece has sockets for other pieces
	- HILT:
		-root to hold the weapon
		-down attaches to a spike 
		-up attaches to a guard/adaptor/shaft/allowed head/
		-Stat effects:
			-
			-
	- GUARD (adaptor):
		- can be used to make the head not look stupid (if not an allowed head)
		- 
		-down attaches to a hilt 
		-up attaches to a shaft/allowed head 
		-Stat effects:
			-
			-
	- SHAFT
		-big sticky bit 
		-down attaches to a hilt/guard(adaptor)
		-up attaches to a head/shaft/spike
		-Stat effects:
			-RANGE
			-WEIGHT
			-
	- SPIKE
		- just a pointed spike/ball or something to attach to the end of a weapon 
		- TERMINUS POINT
		- down attaches to a hilt/head
		-Stat effects:
			-
			-
	- HEAD
		-the main blade of the weapon 
		-down attaches to a hilt/guard/shaft
		-up attaches to a spike
			-if we want maybe can attach to another shaft for the meme
		-Stat effects:
			-
			-
	
appendages 
	- need to have some internal 'health'
	- possibly some instant break conditions?
	- damage multipliers for different damage types (crush/sever)
	- somehow needs to let the owner take damage (we need to work this out)
	- appendages inflict pain and bleeding to the owner
		- both are applied by sharp and blunt weapons
			-sharp weapons do more bleeding, blunt do more pain 
		- the owner will die after losing too much blood (this will recover with time)
		- the owner will give in if they are in too much pain 
			-pain and bleeding tolerance can be increased by moving towards the defensive classes
	- some appendages have `fatal' tags - when broken the owner will immedaitely die

possible damage model:
user -> ability -> weapon -> enemy -> appendage -> enemy
user has multipliers/additive effects for damage
any ability additions/multipliers (light/heavy or ability) applied
weapon values applied 
WEAPON IS SWUNG


	

How does (active/passive) healing work?????
- auto stop bleeding (potential animation) after combat
- while in combat use bandages to reduce bleeding
How will armour work??

Stamina/Exhaustion mechanic?

To code the system Andrew wants
A class for body parts
each part has a reference to another part to the up, down, left, right (possibly generalise this to instead find the closest part based on input)
a bool for whether or not this one is targetted, some way to tell if player is behind (to swap left,right)


-	Each enemy has a target thing
-	Player activates / deactivates it on lockon
-	When activated it needs to give off a particle effect (or something)
-	Needs reference to the pawn's mesh
-	player needs reference to its location.




Light + Particles to identify where the player(s) is/are targetting
	- Particles should launch normal to the mesh somehow.








	
-	Combat Ideas
	-	Attack Skill ideas
		-	Blink/dash - tp from a to b (short range)
		-	Magic weapon throw
		-	Buff weapon
			-	Enhance speed
			-	Add Element
			-	
		-	'Stuck' weapon (this could all be a particular skill or something)
			- explodes (or something) in enemy (see below)
	-	Attacks Stick/bounce on larger enemies
		-	Based on weight/size/armour/toughness of skin(?), type of weapon, quality of swing
		-	
	-	Super duper targetting system that leaves Andrew aroused
		-	for multiplayer purposes allow to change targetting highlight colour either:
			- a setting that you can change
			- based on the equipment you're using
			- Maybe change colour for each party member and slight change of targeting reticle design for different class of weapon/equipment
	-	Appendage System
		-Execute on weakened enemies (after disabling arms/legs)

-	Rather then set 'classes' for characters could have weapon skills/masteries
	-	let players choose what weapon they use and dont lock them to it
	-	build mastery of a weapon through use and 'training' (<- training per say may be a bit iffy idk)
	-	if a player wants to switch weapon they can, however include a punishment for other stats not being used
	-	e.g. a player uses weapon A for a while, builds up a bit of skill, switches to weapon B, building different skills, causing other non-used skills to decay
	-	encourages use of weapons previously used rather than farm and max out and forget about it
	-	Could be annoying to some if coming back to Weapon A after using Weapon B for a long period of time
		-	^ Combat this with accelerated skill earning when revisiting previously used weapon
			-	^ remember the highest level that skill has had

-	Definitely gotta have a marriage system, gotta get dem waifus
	- Probably not

-	'everyday life' skills (maybe)
	-	IF WE DO THIS IT WILL BE AFTER LITERALLY EVERYTHING ELSE
	-	If we're planning on implementing normal skills (such as cooking, smithing, etc) include minigame of sort
	-	(Rather than just a number going up for clicking the 'cook' button)
	-	instead of minigame [MAYBE A BIT TOO AMBITIOUS] 
		-	For cooking for example, reward places with bonus skill XP for experimenting with new, unknown ingredients, creating new meals with added bonuses (or whatever purpose food serves ingame)
	

	

